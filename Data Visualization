###   STEP :- 6 (Data Visualization and Plots)   ###


#  DONUT CHARTS


g_labels <- c("Male", "Female")
g_values <- table(SURdf$gender)

# Churn labels and values
c_labels <- c("No", "Yes")
c_values <- table(SURdf$Churn)

# Create the Gender donut chart
gender_pie <- plot_ly(
  labels = g_labels,
  values = as.numeric(g_values),
  type = 'pie',
  hole = 0.4,
  textinfo = 'percent+label',
  name = "Gender",
  marker = list(colors = c('#1f77b4', '#ff7f0e')) # Custom colors
)

# Create the Churn donut chart
churn_pie <- plot_ly(
  labels = c_labels,
  values = as.numeric(c_values),
  type = 'pie',
  hole = 0.4,
  textinfo = 'percent+label',
  name = "Churn",
  marker = list(colors = c('#2ca02c', '#9467bd')) # Custom colors
)

fig <- subplot(
  gender_pie,
  churn_pie,
  nrows = 1, 
  shareX = FALSE, 
  shareY = FALSE
)

fig <- fig %>%
  layout(
    title = "Gender and Churn Distributions",
    showlegend = TRUE,
    annotations = list(
      list(text = "Gender", x = 0.2, y = 0.5, font = list(size = 20), showarrow = FALSE),
      list(text = "Churn", x = 0.8, y = 0.5, font = list(size = 20), showarrow = FALSE)
    )
  )

fig


result <- SURdf %>%
  filter(Churn == "No") %>%       # (Filter rows where 'Churn' is "No")
  group_by(gender) %>%            # (Group by 'gender')
  summarise(count = n())          # (Count the number of rows in each group)

print(result)


res <- SURdf %>%
  filter(Churn == "Yes") %>%      # (Filter rows where 'Churn' is "Yes")
  group_by(gender) %>%            # (Group by 'gender')
  summarise(count = n())          # (Count the number of rows in each group)

print(res)


#  OUTER DONUT CHARTS


outer_labels <- c("Churn: Yes", "Churn: No")
outer_values <- c(1869, 5163)
outer_colors <- c('#ff6666', '#66b3ff') 

# Data for the inner layer (Gender within Churn)
inner_labels <- c("F", "M", "F", "M")
inner_values <- c(939, 930, 2544, 2619)
inner_colors <- c('#ff9999', '#ffb3e6', '#9999ff', '#b3d9ff')

# Outer Donut Chart (Churn)
outer_pie <- plot_ly(
  labels = outer_labels,
  values = outer_values,
  type = 'pie',
  hole = 0.5,
  textinfo = 'label+percent',
  textfont = list(size = 15),
  marker = list(colors = outer_colors),
  domain = list(x = c(0, 1), y = c(0, 1))
)

# Inner Donut Chart (Gender)
inner_pie <- plot_ly(
  labels = inner_labels,
  values = inner_values,
  type = 'pie',
  hole = 0.7, 
  textinfo = 'label',
  textfont = list(size = 13),
  marker = list(colors = inner_colors),
  domain = list(x = c(0, 1), y = c(0, 1))
)


nested_donut <- subplot(outer_pie, inner_pie, nrows = 1) %>%
  layout(
    title = list(
      text = "Churn Distribution w.r.t Gender: Male(M), Female(F)",
      font = list(size = 18)
    ),
    showlegend = FALSE
  )

nested_donut


#  HISTOGRAM (GROUPED)


fig <- plot_ly(
  data = SURdf, 
  x = ~Churn,    
  color = ~Contract,  # (Grouped by the Contract column)
  type = "histogram", 
  barmode = "group"   # (Grouped bars)
)

fig <- fig %>%
  layout(
    title = list(text = "<b>Customer Contract Distribution<b>", font = list(size = 18)),
    xaxis = list(title = "Churn"),
    yaxis = list(title = "Count"),
    width = 700,
    height = 500,
    bargap = 0.1  # (Gap between bars)
  )

fig


#  DONUT CHARTS


# (Extract labels (unique PaymentMethod) and values (counts of each PaymentMethod) )
labels <- unique(SURdf$PaymentMethod)          # (Unique PaymentMethod values)
values <- table(SURdf$PaymentMethod)          # (Counts of each PaymentMethod)


fig <- plot_ly(
  labels = names(values),                     # (PaymentMethod categories)
  values = as.numeric(values),                # (Counts of each category)
  type = 'pie',
  hole = 0.3                                
)

fig <- fig %>%
  layout(
    title = list(text = "<b>Payment Method Distribution</b>", font = list(size = 18))
  )

fig


#  HISTOGRAM (GROUPED)


fig <- plot_ly(
  data = SURdf,                 
  x = ~Churn,                    
  color = ~PaymentMethod,        
  type = "bar"                   
)


fig <- fig %>%
  layout(
    title = "<b>Customer Payment Method distribution w.r.t. Churn</b>",
    xaxis = list(title = "Churn"),
    yaxis = list(title = "Count"),
    barmode = "stack",           
    width = 700,
    height = 500,
    bargap = 0.1                 
  )

fig


# (Get unique values from the 'InternetService' column)
unique(SURdf$InternetService)


# (Filter rows where gender is "Male" and count combinations of InternetService and Churn)
result <- SURdf %>%
  filter(gender == "Male") %>%                 
  count(InternetService, Churn) %>%          
  arrange(desc(n))                             

print(result)


# (Filter rows where gender is "Female" and count combinations of InternetService and Churn)
result <- SURdf %>%
  filter(gender == "Female") %>%                 
  count(InternetService, Churn) %>%          
  arrange(desc(n))                             

print(result)


#  BAR GRAPHS


x <- list(
  list("Churn:No", "Churn:No", "Churn:Yes", "Churn:Yes"),  # Outer group (Churn)
  list("Female", "Male", "Female", "Male")                # Inner group (Gender)
)

y_dsl <- c(965, 992, 219, 240)              # (Y values for DSL)
y_fiber <- c(889, 910, 664, 633)            # (Y values for Fiber optic)
y_no_internet <- c(690, 717, 56, 57)        # (Y values for No Internet)


fig <- plot_ly()

fig <- fig %>%
  add_trace(
    x = x, y = y_dsl, type = "bar", name = "DSL"
  ) %>%
  add_trace(
    x = x, y = y_fiber, type = "bar", name = "Fiber optic"
  ) %>%
  add_trace(
    x = x, y = y_no_internet, type = "bar", name = "No Internet"
  )

fig <- fig %>%
  layout(
    title = "<b>Churn Distribution w.r.t. Internet Service and Gender</b>",
    xaxis = list(title = "Churn and Gender"),
    yaxis = list(title = "Count"),
    barmode = "group"  
  )

fig


#  HISTOGRAM (Grouped)


color_map <- c("Yes" = "#FF97FF", "No" = "#AB63FA")

# (Create the grouped histogram)
fig <- plot_ly(
  data = SURdf,                
  x = ~Churn,                  
  color = ~Dependents,         
  colors = color_map,          
  type = "bar",                
  barmode = "group"            
)


fig <- fig %>%
  layout(
    title = list(
      text = "<b>Dependents Distribution</b>",
      font = list(size = 18)
    ),
    xaxis = list(title = "Churn"),
    yaxis = list(title = "Count"),
    width = 700,               
    height = 500,              
    bargap = 0.1               
  )

fig


# Define the custom color mapping for Partner (Yes/No)
color_map <- c("Yes" = "#FFA15A", "No" = "#00CC96")


fig <- plot_ly(
  data = SURdf,              
  x = ~Churn,                
  color = ~Partner,          
  type = "bar",              
  barmode = "group",         
  colors = color_map         
)


fig <- fig %>%
  layout(
    title = "<b>Churn Distribution w.r.t. Partners</b>",  
    xaxis = list(title = "Churn"),                       
    yaxis = list(title = "Count"),                       
    width = 700,                                         
    height = 500,                                        
    bargap = 0.1                                         
  )

fig


#  BAR CHARTS


# Define the custom color mapping for OnlineSecurity
color_map <- c("Yes" = "#FF97FF", "No" = "#AB63FA")  # (Mapping for OnlineSecurity categories)

fig <- plot_ly(
  data = SURdf,                      
  x = ~Churn,                        
  color = ~OnlineSecurity,           # Grouped by OnlineSecurity column
  type = "bar",                      
  colors = color_map,                
  barmode = "group"                  
)


fig <- fig %>%
  layout(
    title = "<b>Churn w.r.t Online Security</b>",  
    xaxis = list(title = "Churn"),                
    yaxis = list(title = "Count"),                
    width = 700,                                  
    height = 500,                                 
    bargap = 0.1                                  
  )

fig


# Define the custom color mapping for PaperlessBilling with red, yellow, and black
color_map <- c("Yes" = "red", "No" = "yellow")


fig <- plot_ly(
  data = SURdf,                      
  x = ~Churn,                         
  color = ~PaperlessBilling,          # Grouped by PaperlessBilling column
  type = "bar",                       # Use bar chart
  colors = color_map                  
)

fig <- fig %>%
  layout(
    title = "<b>Churn Distribution w.r.t. Paperless Billing</b>",  
    xaxis = list(title = "Churn"),                                
    yaxis = list(title = "Count"),                                
    width = 700,                                                 
    height = 500,                                                 
    bargap = 0.1                                                  
  )


fig


# Define the custom color mapping for TechSupport
color_map <- c("Yes" = "pink", "No" = "blue", "NA" = "brown") 


fig <- plot_ly(
  data = SURdf,                     
  x = ~Churn,                        
  color = ~TechSupport,              # Grouped by TechSupport column
  type = "bar",                      # Use bar chart
  colors = color_map,                
  barmode = "group"                  
)

fig <- fig %>%
  layout(
    title = "<b>Churn Distribution w.r.t. TechSupport</b>",  
    xaxis = list(title = "Churn"),                          
    yaxis = list(title = "Count"),                          
    width = 700,                                            
    height = 500,                                           
    bargap = 0.1                                            
  )

fig


# Define the custom color mapping for PhoneService
color_map <- c("Yes" = "green", "No" = "yellow", "No phone service" = "red")

fig <- plot_ly(
  data = SURdf,                      
  x = ~Churn,                        
  color = ~PhoneService,             # Grouped by PhoneService column
  type = "bar",                      # Use bar chart
  colors = color_map,                
  barmode = "group"                  
)

fig <- fig %>%
  layout(
    title = "<b>Churn Distribution w.r.t. Phone Service</b>",  
    xaxis = list(title = "Churn"),                            
    yaxis = list(title = "Count"),                            
    width = 700,                                              
    height = 500,                                             
    bargap = 0.1                                              
  )

fig


#  DENSITY PLOT


ggplot(SURdf, aes(x = MonthlyCharges, fill = Churn)) +
  geom_density(alpha = 0.5) +            # Add density plots with transparency
  scale_fill_manual(values = c("No" = "black", "Yes" = "pink")) + 
  labs(
    title = "Distribution of Monthly Charges by Churn",
    x = "Monthly Charges",
    y = "Density",
    fill = "Churn"                      
  ) +
  theme_minimal() +                      
  theme(
    text = element_text(size = 12),     
    legend.position = "top"             
  )


#  DENSITY PLOTS


ggplot(SURdf, aes(x = TotalCharges, fill = Churn)) +
  geom_density(alpha = 0.5) +            # Add density plots with transparency
  scale_fill_manual(values = c("No" = "orange", "Yes" = "red")) + 
  labs(
    title = "Distribution of Total Charges by Churn",
    x = "Total Charges",
    y = "Density",
    fill = "Churn"                      
  ) +
  theme_minimal() +                     
  theme(
    text = element_text(size = 12),     
    legend.position = "top"             
  )


#  BOX PLOTS


fig <- plot_ly(
  data = SURdf,               
  x = ~Churn,                  
  y = ~tenure,                 
  type = "box",                # Specify a boxplot
  marker = list(color = "black")  
)


fig <- fig %>%
  layout(
    title = list(
      text = "<b>Tenure vs Churn</b>", 
      font = list(size = 25, family = "Courier")  
    ),
    xaxis = list(title = "Churn"),               
    yaxis = list(title = "Tenure (Months)"),     
    width = 750,                                 
    height = 600                                 
  )

fig


#  CORRELATION MATRIX


# Convert categorical variables to numeric factors
numeric_df <- as.data.frame(lapply(SURdf, function(x) {
  if (is.factor(x) || is.character(x)) {
    as.numeric(as.factor(x))  # Convert factors or characters to numeric
  } else {
    x
  }
}))

# Compute the correlation matrix
corr <- cor(numeric_df, use = "pairwise.complete.obs")

# Create a clearer heatmap with better formatting
ggcorrplot(corr, 
           method = "square", 
           lab = TRUE,                      # Add correlation coefficients
           lab_size = 2.5,                    # Adjust text size of coefficients
           colors = c("blue", "white", "red"), 
           outline.color = "white", 
           ggtheme = theme_minimal()) +
  labs(title = "Correlation Heatmap", 
       subtitle = "Factorized Numeric Data") +
  theme(
    plot.title = element_text(size = 10, face = "bold", hjust = 0.5),   
    plot.subtitle = element_text(size = 10, hjust = 0.5),              
    axis.text.x = element_text(angle = 45, hjust = 1, size = 7),      
    axis.text.y = element_text(size = 7)                              
  ) +
  scale_x_discrete(expand = expansion(mult = c(0.01, 0.01))) +         
  scale_y_discrete(expand = expansion(mult = c(0.01, 0.01)))  
